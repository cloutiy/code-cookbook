<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Haxe programming language - Code Cookbook</title><link>https://code.haxe.org/</link><description>Easy to read Haxe programming language examples.</description><managingEditor>contact@haxe.org (Haxe Foundation)</managingEditor><docs>http://blogs.law.harvard.edu/tech/rss</docs><language>en</language><lastBuildDate>Thu, 25 Jan 2018 13:18:18 GMT</lastBuildDate><atom:link href="https://code.haxe.org/rss.xml" rel="self" type="application/rss+xml"/><item><title>Invoke object method by string</title><link>https://code.haxe.org/category/beginner/reflection-method-call.html</link><guid isPermaLink="true">https://code.haxe.org/category/beginner/reflection-method-call.html</guid><description>To invoke method by it's name you will need to use Reflection API.</description><pubDate>Tue, 23 Jan 2018 00:00:00 GMT</pubDate></item><item><title>Observer</title><link>https://code.haxe.org/category/design-patterns/observer.html</link><guid isPermaLink="true">https://code.haxe.org/category/design-patterns/observer.html</guid><description>This is a basic example of the Observer design pattern in Haxe. The pattern makes use of an Observer interface and an Observable base class to notify objects when another object's property is changed so that they can react accordingly.</description><pubDate>Tue, 02 Jan 2018 00:00:00 GMT</pubDate></item><item><title>Array access of a database manager</title><link>https://code.haxe.org/category/abstract-types/array-access-db-manager.html</link><guid isPermaLink="true">https://code.haxe.org/category/abstract-types/array-access-db-manager.html</guid><description>When using SPOD database objects, or the record-macros library, instances of database models can be accessed using the manager's get function:</description><pubDate>Tue, 21 Nov 2017 00:00:00 GMT</pubDate></item><item><title>Using Iterators as Generic Type Parameters</title><link>https://code.haxe.org/category/abstract-types/using-iterators-as-generic-type-parameters.html</link><guid isPermaLink="true">https://code.haxe.org/category/abstract-types/using-iterators-as-generic-type-parameters.html</guid><description>Iterators are a helpful Haxe structure. Any structure that implements the next and hasNext functions with the appropriate signature will allow you build a for loop. Arrays have an iterator() function that returns exactly this, and you don't need to call it, the for language construction does it for you.</description><pubDate>Tue, 21 Nov 2017 00:00:00 GMT</pubDate></item><item><title>JavaScript inline web workers in Haxe</title><link>https://code.haxe.org/category/javascript/javascript-inline-workers.html</link><guid isPermaLink="true">https://code.haxe.org/category/javascript/javascript-inline-workers.html</guid><description>JavaScript workers make it possible to perform costly calculations (media decoding etc, crypt calculations etc.) in a background thread, without blocking the main UI. There are lots of articles about workers on the net:</description><pubDate>Tue, 21 Nov 2017 00:00:00 GMT</pubDate></item><item><title>Pattern matching</title><link>https://code.haxe.org/category/beginner/pattern-matching.html</link><guid isPermaLink="true">https://code.haxe.org/category/beginner/pattern-matching.html</guid><description>This article helps to learn pattern matching and all of its type of matching in practice. The article covers basic matching, variable capture, guards, extractors and enum/structure matching.</description><pubDate>Thu, 31 Aug 2017 00:00:00 GMT</pubDate></item><item><title>Base64 encoding</title><link>https://code.haxe.org/category/other/base64-encoding.html</link><guid isPermaLink="true">https://code.haxe.org/category/other/base64-encoding.html</guid><description>This article shows how to use base64 in Haxe and how to use a custom charset.</description><pubDate>Thu, 24 Aug 2017 00:00:00 GMT</pubDate></item><item><title>Using strings</title><link>https://code.haxe.org/category/beginner/strings.html</link><guid isPermaLink="true">https://code.haxe.org/category/beginner/strings.html</guid><description>Defining string literals take be done by wrapping text inside double or single quotes:</description><pubDate>Tue, 11 Jul 2017 00:00:00 GMT</pubDate></item><item><title>Include a file next to a Haxe module file</title><link>https://code.haxe.org/category/macros/include-file-next-to-module-file.html</link><guid isPermaLink="true">https://code.haxe.org/category/macros/include-file-next-to-module-file.html</guid><description>This example lets you take a file next to the current module .hx file and include its file content. That can be very useful if you want to separate (for example) view templates, shader sources or other multiline texts from the Haxe source. The articles demonstrates how to do it with an expression macro but also with a build macro.</description><pubDate>Tue, 04 Jul 2017 00:00:00 GMT</pubDate></item><item><title>Email address as abstract type</title><link>https://code.haxe.org/category/abstract-types/emailaddress.html</link><guid isPermaLink="true">https://code.haxe.org/category/abstract-types/emailaddress.html</guid><description>The following EmailAddress Abstract type example is based on the underlying standard String type, but sets the restriction that it can only represent a valid email address. If not, an exception will be thrown.</description><pubDate>Tue, 09 May 2017 00:00:00 GMT</pubDate></item><item><title>Strict typing for stringly-typed extern code</title><link>https://code.haxe.org/category/abstract-types/abstracts-with-type-params.html</link><guid isPermaLink="true">https://code.haxe.org/category/abstract-types/abstracts-with-type-params.html</guid><description>A common pattern, often found in (but not only in) dynamic languages, is to denote the type of some object with a string, for example:</description><pubDate>Tue, 09 May 2017 00:00:00 GMT</pubDate></item><item><title>Color as abstract type</title><link>https://code.haxe.org/category/abstract-types/color.html</link><guid isPermaLink="true">https://code.haxe.org/category/abstract-types/color.html</guid><description>The following example demonstrates how a color type can be abstracted over an integer, which stores the color in an ARGB format.</description><pubDate>Tue, 09 May 2017 00:00:00 GMT</pubDate></item><item><title>Rounded Float as abstract type</title><link>https://code.haxe.org/category/abstract-types/rounded-float.html</link><guid isPermaLink="true">https://code.haxe.org/category/abstract-types/rounded-float.html</guid><description>This abstract type is based on the underlying Float type, but whenever it is converted back to an actual Float it is rounded to avoid the famous rounding errors occuring in floating point aritmetics.</description><pubDate>Tue, 09 May 2017 00:00:00 GMT</pubDate></item><item><title>Temperature units as abstract type</title><link>https://code.haxe.org/category/abstract-types/temperature-units.html</link><guid isPermaLink="true">https://code.haxe.org/category/abstract-types/temperature-units.html</guid><description>The following Celcius and Fahrenheit Abstract types are based on the underlying Float type, but sets the restriction that it can never hold values below absolute zero. </description><pubDate>Tue, 09 May 2017 00:00:00 GMT</pubDate></item><item><title>Using arrays</title><link>https://code.haxe.org/category/beginner/arrays.html</link><guid isPermaLink="true">https://code.haxe.org/category/beginner/arrays.html</guid><description>In Haxe, the Array type represents a collection of elements ordered by their index (order number) in the collection.</description><pubDate>Tue, 09 May 2017 00:00:00 GMT</pubDate></item><item><title>Conditional compilation</title><link>https://code.haxe.org/category/beginner/conditional-compilation.html</link><guid isPermaLink="true">https://code.haxe.org/category/beginner/conditional-compilation.html</guid><description>This snippet demonstrates use of conditional compilation with custom compiler flags.</description><pubDate>Tue, 09 May 2017 00:00:00 GMT</pubDate></item><item><title>Working with date and time</title><link>https://code.haxe.org/category/beginner/date-time.html</link><guid isPermaLink="true">https://code.haxe.org/category/beginner/date-time.html</guid><description>The Date class provides a basic structure for date and time related information. This article shows how to work with the date and time tools.</description><pubDate>Tue, 09 May 2017 00:00:00 GMT</pubDate></item><item><title>Declare classes</title><link>https://code.haxe.org/category/beginner/declare-classes.html</link><guid isPermaLink="true">https://code.haxe.org/category/beginner/declare-classes.html</guid><description>Create a new class with two functions and create a new instance of it.</description><pubDate>Tue, 09 May 2017 00:00:00 GMT</pubDate></item><item><title>Declare functions</title><link>https://code.haxe.org/category/beginner/declare-functions.html</link><guid isPermaLink="true">https://code.haxe.org/category/beginner/declare-functions.html</guid><description>Declare function with arguments</description><pubDate>Tue, 09 May 2017 00:00:00 GMT</pubDate></item><item><title>Using enum / ADT</title><link>https://code.haxe.org/category/beginner/enum-adt.html</link><guid isPermaLink="true">https://code.haxe.org/category/beginner/enum-adt.html</guid><description>Haxe's enumeration types are algebraic data types. Their primary use is for describing data structures.</description><pubDate>Tue, 09 May 2017 00:00:00 GMT</pubDate></item></channel></rss>